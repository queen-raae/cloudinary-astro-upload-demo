---
import BaseHead from "../components/BaseHead.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import { v2 as cloudinary } from "cloudinary";
import { Image } from "@unpic/astro";

cloudinary.config({
  cloud_name: import.meta.env.CLOUDINARY_CLOUD_NAME,
  api_key: import.meta.env.CLOUDINARY_API_KEY,
  api_secret: import.meta.env.CLOUDINARY_API_SECRET,
});

let images = [];

try {
  const result = await cloudinary.search
    .expression("folder:astro")
    .sort_by("uploaded_at", "desc")
    .max_results(30)
    .execute();

  images = result.resources;
} catch (error) {
  if (error instanceof Error) {
    console.error(error.message);
  } else {
    console.error(error);
  }
}

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();

    if (!data.get("image")) throw new Error("No image value");

    const imageFile = data.get("image") as unknown as File;

    const bytes = await imageFile.arrayBuffer();
    const buffer = Buffer.from(bytes);
    const b64 = buffer.toString("base64");
    let dataURI = "data:" + imageFile.type + ";base64," + b64;

    const response = await cloudinary.uploader.upload(dataURI, {
      folder: "astro",
      resource_type: "auto",
    });
    images.unshift(response);
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    } else {
      console.error(error);
    }
  }
}
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <main>
      <h1><a href="/">{SITE_TITLE}</a></h1>
      <p>{SITE_DESCRIPTION}</p>

      <h2>Upload your image</h2>
      <form method="post" enctype="multipart/form-data">
        <label>
          Description:
          <input type="text" name="description" />
        </label>
        <label>
          Image:
          <input type="file" name="image" />
        </label>
        <button>Submit</button>
      </form>

      <section>
        {
          images.map((image: { secure_url: string; filename: string }) => (
            <Image
              src={image.secure_url}
              layout="constrained"
              width={300}
              height={300}
              alt={image.filename}
            />
          ))
        }
      </section>
    </main>
  </body>
</html>
